Usando a linha de comando do Doctrine (php .\vendor\bin\doctrine) é sugerida
uma sintaxe para a criação de um arquivo de configuração chamado 
config/cli-config.php, para que o framework funcione no projeto.

O doctrine não recomenda o uso de seu cli em vendor. Ao invés disso, recomenda
consultar a documentação do Doctrine Console: 
https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/tools.html#doctrine-console

Na documentação recomenda a criação de um arquivo à parte para a configuração 
Doctrine Console (ver o arquivo \bin\doctrine.php).

No curso, teremos duas formas de usar o doctrine: ou o CLI na pasta vendor\bin
ou o CLI personalizado do Doctrine Console.

Um exemplo para uso do CLI é:
    doctrine orm:info

Esse comando vai verificar se há falha no código do ORM. Nesse caso, o criador 
do EntityManager está com o caminho errado (src\Helper/src). Para corrigir, é
necessário "subir uma pasta" ao invés de indicar a subpasta src (ver o código 
de src/Helper/EntityManagerCreator.php).

Outro comando para descrever uma entidade: 
    doctrine.php orm:mapping:describe <Nome da Entidade>

Comando para criar o banco de dados, conforme as configurações:
    doctrine.php orm:schema-tool:create

Comando para executar um SQL qualquer:
    doctrine.php dbal:run-sql "SELECT * FROM TABLE"

Comandos persist e flush:

$entityManager->persist($student); 
// O método persist apenas guarda o objeto no EntityManager, não no database.
// O EntityManager passa a gerenciar o objeto $student.

$entityManager->flush(); 
// Comita no database todas as alterações gerenciadas pelo EntityManager,
// em uma única transação.

Alguns métodos dos repositórios do Doctrine:
    findAll: retorna um array com todas entidades do repositório.
        $studentRepository->findAll();

    find: retorna uma única entidade do repositório, recuperada pelo seu ID.
        $studentRepository->find(2);

    findBy: filtra o repositório usando um array com chave/valor. Retorna um 
    array das entidades filtradas. O método findBy também pode receber um
    segundo array como parâmetro que define os critérios de ordenação. O 
    terceiro parâmetro limita o número de resultados e o quarto parâmetro 
    informa a partir de qual linha o resultado é exibido (recurso usado em 
    paginação):
        $studentRepository->findBy(['name' => "Maria José"]);
        $alunoRepository->findBy(
            [], // $criteria, Critérios de filtro.
            ['nome' => 'ASC'], // $orderBy, Critérios de ordenação.
            2, // $limit, Número máximo de resultados.
            3 // $offset, Linha a partir da qual os resultados serão exibidos.
        );

    findOneBy: retorna uma única entidade, recuperada conforme critérios de um 
    array usado para filtro.
        studentRepository->findOneBy(['name'=> "João da Silva"]);

    count: conta o número de entidades no repositório.
        $studentRepository->count([]);

Há duas formas de recuperar uma entidade pelo ID:
    1. Usando o EntityManager:
        $student = $entityManager->find(Student::class, $argv[1]);

    2. Usando o repositório: 
        $studentRepository = $entityManager->getRepository(Student::class);
        $student = $studentRepository->find($argv[1]);

Por que precisamos chamar o persist para inserir, mas não para atualizar uma 
entidade? Porque a entidade que atualizamos já estava sendo gerenciada pelo 
Doctrine. Ao recuperar uma entidade a partir do repositório, o EntityManager 
já gerencia o objeto recuperado (como se o método persist tivesse sido 
implicitamente chamado).

O método getPartialReference do EntityManager permite a criação de um objeto
da classe da entidade, mas ele apenas inicializa o ID do objeto. Isso evita que
o banco de dados receba uma requisição a mais, melhorando a performance.

O método getPartialReference também pode ser usado ao atualizar a entidade.

Por baixo dos panos, o método "remove"  do EntityManager tira o ID da entidade:
   unset($student->id);
Por isso, a classe da entidade precisa permitir escrita no ID.
